generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  age            Int?
  username       String           @unique
  passwordHash   String           @map("password_hash")
  role           String           @default("user")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  githubId       String?          @unique
  googleId       String?          @unique
  mantras        Mantra[]
  sessions       Session[]
  SocialLinkPage SocialLinkPage[]
  UserPassword   UserPassword[]
  budgets        Budget[]

  @@index([username])
  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model SocialLinkPage {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  userId    String       @map("user_id")
  title     String?
  isPublic  Boolean      @default(true) @map("is_public")
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  links     SocialLink[]

  @@map("social_link_pages")
}

model SocialLink {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  label     String
  url       String
  pageId    String         @map("page_id")
  order     Int            @default(0)
  page      SocialLinkPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("social_links")
}

model UserPassword {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  details      String?
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_passwords")
}

model Mantra {
  id        String   @id @default(uuid())
  content   String   @unique
  like      Boolean  @default(false)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mantras")
}

model Budget {
  id        String    @id @default(uuid())
  name      String
  amount    Float
  currency  String
  userId    String?   @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  expenses  Expense[]
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("budgets")
}

model Expense {
  id          String   @id @default(uuid())
  description String
  amount      Float
  budgetId    String   @map("budget_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  budget      Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@map("expenses")
}
