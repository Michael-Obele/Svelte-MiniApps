// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider  = "postgresql"
  provider  = "sqlite"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String           @id @default(uuid())
  age            Int?
  username       String           @unique
  passwordHash   String           @map("password_hash")
  role           String           @default("user")
  sessions       Session[]
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  SocialLinkPage SocialLinkPage[]
  githubId       String?          @unique
  googleId       String?          @unique
  UserPassword   UserPassword[]
  mantras        Mantra[]

  @@index([username])
  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@map("session")
}

model SocialLinkPage {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  userId    String       @map("user_id")
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  links     SocialLink[]
  title     String?
  isPublic  Boolean      @default(true) @map("is_public")

  @@map("social_link_pages")
}

model SocialLink {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  label     String
  url       String
  pageId    String         @map("page_id")
  page      SocialLinkPage @relation(fields: [pageId], references: [id], onDelete: Cascade)
  order     Int            @default(0)

  @@map("social_links")
}

model UserPassword {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  details      String?
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("user_passwords")
}

model Mantra {
  id        String   @id @default(uuid())
  content   String   @unique
  like      Boolean  @default(false)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("mantras")
}
