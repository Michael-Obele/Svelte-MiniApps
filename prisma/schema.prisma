generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  age                Int?
  username           String              @unique
  passwordHash       String              @map("password_hash")
  role               String              @default("user")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  githubId           String?             @unique
  googleId           String?             @unique
  mantras            Mantra[]
  sessions           Session[]
  SocialLinkPage     SocialLinkPage[]
  UserPassword       UserPassword[]
  budgets            Budget[]
  items              Item[]
  purchaseRecords    PurchaseRecord[]
  medicationSessions MedicationSession[]
  smokingAttempts    SmokingAttempt[]

  @@index([username])
  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model SocialLinkPage {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  userId    String       @map("user_id")
  title     String?
  isPublic  Boolean      @default(true) @map("is_public")
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  links     SocialLink[]

  @@map("social_link_pages")
}

model SocialLink {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  label     String
  url       String
  pageId    String         @map("page_id")
  order     Int            @default(0)
  page      SocialLinkPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("social_links")
}

model UserPassword {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  details      String?
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_passwords")
}

model Mantra {
  id        String   @id @default(uuid())
  content   String   @unique
  like      Boolean  @default(false)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mantras")
}

model Budget {
  id        String    @id @default(uuid())
  name      String
  amount    Float
  currency  String
  userId    String?   @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  expenses  Expense[]
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("budgets")
}

model Expense {
  id          String   @id @default(uuid())
  description String
  amount      Float
  budgetId    String   @map("budget_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  budget      Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model Item {
  id              String           @id @default(uuid())
  name            String
  category        String
  description     String?
  defaultUnit     String?
  defaultCurrency String           @default("USD")
  userId          String?          @map("user_id")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchases       PurchaseRecord[]

  @@map("items")
}

model PurchaseRecord {
  id            String   @id @default(uuid())
  itemId        String   @map("item_id")
  quantity      Float
  cost          Float
  currency      String   @default("USD")
  date          DateTime
  location      String?
  paymentMethod String?
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")
  item          Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  userId        String?  @map("user_id")
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([itemId])
  @@map("purchase_records")
}

model MedicationSession {
  id          String          @id @default(uuid())
  name        String
  description String?
  startDate   DateTime        @map("start_date")
  endDate     DateTime?       @map("end_date")
  isActive    Boolean         @default(true) @map("is_active")
  userId      String          @map("user_id")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  medications Medication[]
  logs        MedicationLog[]

  @@index([userId])
  @@index([isActive])
  @@map("medication_sessions")
}

model Medication {
  id           String            @id @default(uuid())
  name         String
  dosage       String
  frequency    String
  instructions String?
  startDate    DateTime          @map("start_date")
  endDate      DateTime?         @map("end_date")
  color        String
  sessionId    String            @map("session_id")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")
  session      MedicationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  logs         MedicationLog[]

  @@index([sessionId])
  @@map("medications")
}

model MedicationLog {
  id            String            @id @default(uuid())
  sessionId     String            @map("session_id")
  medicationId  String            @map("medication_id")
  scheduledTime DateTime          @map("scheduled_time")
  actualTime    DateTime?         @map("actual_time")
  status        String            @default("pending")
  notes         String?
  createdAt     DateTime          @default(now()) @map("created_at")
  session       MedicationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  medication    Medication        @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([medicationId])
  @@index([scheduledTime])
  @@index([status])
  @@map("medication_logs")
}

model SmokingAttempt {
  id            String       @id @default(uuid())
  userId        String       @map("user_id")
  startDate     DateTime     @map("start_date")
  lastSmokeDate DateTime     @map("last_smoke_date")
  isActive      Boolean      @default(true) @map("is_active")
  longestStreak Int          @default(0) @map("longest_streak")
  resetCount    Int          @default(0) @map("reset_count")
  endDate       DateTime?    @map("end_date")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  cravings      CravingLog[]

  @@index([userId])
  @@index([isActive])
  @@map("smoking_attempts")
}

model CravingLog {
  id             String         @id @default(uuid())
  attemptId      String         @map("attempt_id")
  timestamp      DateTime
  intensity      Int
  trigger        String?
  copingStrategy String?        @map("coping_strategy")
  notes          String?
  success        Boolean        @default(false)
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  attempt        SmokingAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)

  @@index([attemptId])
  @@index([timestamp])
  @@map("craving_logs")
}
