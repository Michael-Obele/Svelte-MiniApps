/**
 * Language Configuration
 * Defines all available languages in the application with their metadata
 */

export interface Language {
	code: string;
	name: string;
	nativeName: string;
	flag: string;
	dir?: 'ltr' | 'rtl'; // text direction
}

export const AVAILABLE_LANGUAGES: Language[] = [
	{
		code: 'en',
		name: 'English',
		nativeName: 'English',
		flag: 'ðŸ‡¬ðŸ‡§',
		dir: 'ltr'
	},
	{
		code: 'es',
		name: 'Spanish',
		nativeName: 'EspaÃ±ol',
		flag: 'ðŸ‡ªðŸ‡¸',
		dir: 'ltr'
	},
	{
		code: 'fr',
		name: 'French',
		nativeName: 'FranÃ§ais',
		flag: 'ðŸ‡«ðŸ‡·',
		dir: 'ltr'
	},
	{
		code: 'de',
		name: 'German',
		nativeName: 'Deutsch',
		flag: 'ðŸ‡©ðŸ‡ª',
		dir: 'ltr'
	},
	{
		code: 'zh',
		name: 'Chinese',
		nativeName: 'ä¸­æ–‡',
		flag: 'ðŸ‡¨ðŸ‡³',
		dir: 'ltr'
	},
	{
		code: 'ja',
		name: 'Japanese',
		nativeName: 'æ—¥æœ¬èªž',
		flag: 'ðŸ‡¯ðŸ‡µ',
		dir: 'ltr'
	},
	{
		code: 'pt',
		name: 'Portuguese',
		nativeName: 'PortuguÃªs',
		flag: 'ðŸ‡µðŸ‡¹',
		dir: 'ltr'
	},
	{
		code: 'ar',
		name: 'Arabic',
		nativeName: 'Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©',
		flag: 'ðŸ‡¸ðŸ‡¦',
		dir: 'rtl'
	}
];

/**
 * Get language by code
 */
export function getLanguage(code: string): Language | undefined {
	return AVAILABLE_LANGUAGES.find((lang) => lang.code === code);
}

/**
 * Get language name by code
 */
export function getLanguageName(code: string): string {
	const language = getLanguage(code);
	return language?.nativeName || code;
}

/**
 * Check if a language code is valid
 */
export function isValidLanguage(code: string): boolean {
	return AVAILABLE_LANGUAGES.some((lang) => lang.code === code);
}

/**
 * Get default language code
 */
export const DEFAULT_LANGUAGE = 'en';

/**
 * Get all language codes
 */
export const LANGUAGE_CODES = AVAILABLE_LANGUAGES.map((lang) => lang.code);
